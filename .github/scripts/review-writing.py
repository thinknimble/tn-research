#!/usr/bin/env python3
"""
Writing Style Review Script for GitHub Actions

This script reviews markdown files in PRs using the writing-style-reviewer agent.
It posts reviews as PR comments with inline feedback.
"""

import os
import sys
from pathlib import Path
import anthropic
from github import Github

def get_changed_markdown_files():
    """Get list of changed markdown files in content directories."""
    # Use git to find changed files
    import subprocess

    # Get the base branch (usually main)
    base_ref = os.environ.get('GITHUB_BASE_REF', 'main')

    # Get changed files
    result = subprocess.run(
        ['git', 'diff', '--name-only', f'origin/{base_ref}...HEAD'],
        capture_output=True,
        text=True
    )

    all_files = result.stdout.strip().split('\n')

    # Filter for markdown files in content directories
    content_dirs = ['_notes/', '_essays/', '_posts/']
    changed_files = [
        f for f in all_files
        if any(f.startswith(d) for d in content_dirs) and f.endswith('.md')
    ]

    return changed_files

def read_agent_definition():
    """Read the writing-style-reviewer agent definition."""
    agent_path = Path('.claude/agents/writing-style-reviewer.md')

    if not agent_path.exists():
        print(f"Error: Agent definition not found at {agent_path}")
        sys.exit(1)

    return agent_path.read_text()

def read_file_content(filepath):
    """Read content of a markdown file."""
    path = Path(filepath)

    if not path.exists():
        return None

    return path.read_text()

def review_file_with_claude(filepath, content, agent_definition):
    """Send file to Claude for review using the agent definition."""

    api_key = os.environ.get('ANTHROPIC_API_KEY')
    if not api_key:
        print("Error: ANTHROPIC_API_KEY environment variable not set")
        sys.exit(1)

    client = anthropic.Anthropic(api_key=api_key)

    # Construct the review prompt
    prompt = f"""Here is a markdown file to review: {filepath}

---BEGIN FILE CONTENT---
{content}
---END FILE CONTENT---

Please review this file according to the writing style guidelines and provide your feedback in the specified format."""

    try:
        message = client.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=4096,
            system=agent_definition,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        return message.content[0].text

    except Exception as e:
        print(f"Error calling Claude API: {e}")
        return None

def post_review_as_code_review(review_text, filepath, commit_sha):
    """Post review as a proper GitHub code review."""

    github_token = os.environ.get('GITHUB_TOKEN')
    pr_number = int(os.environ.get('PR_NUMBER'))
    repo_name = os.environ.get('REPO_NAME')

    if not all([github_token, pr_number, repo_name]):
        print("Error: Missing GitHub environment variables")
        sys.exit(1)

    g = Github(github_token)
    repo = g.get_repo(repo_name)
    pr = repo.get_pull(pr_number)

    # Format the review body
    review_body = f"""## üìù Writing Style Review

{review_text}

---
*Review generated by [writing-style-reviewer agent](.claude/agents/writing-style-reviewer.md)*
"""

    # Post as a code review with REQUEST_CHANGES event
    # Using COMMENT event to be non-blocking
    pr.create_review(
        commit=repo.get_commit(commit_sha),
        body=review_body,
        event="COMMENT",  # Can be: APPROVE, REQUEST_CHANGES, or COMMENT
        comments=[]  # Could add inline comments here in the future
    )
    print(f"‚úÖ Posted code review for {filepath}")

def main():
    """Main function to orchestrate the review process."""

    print("üîç Finding changed markdown files...")
    changed_files = get_changed_markdown_files()

    if not changed_files:
        print("‚ÑπÔ∏è  No markdown files changed in content directories")
        return

    print(f"üìÑ Found {len(changed_files)} file(s) to review:")
    for f in changed_files:
        print(f"  - {f}")

    print("\nüìñ Reading agent definition...")
    agent_definition = read_agent_definition()

    # Get commit SHA for the review
    commit_sha = os.environ.get('GITHUB_SHA')
    if not commit_sha:
        print("Error: GITHUB_SHA environment variable not set")
        sys.exit(1)

    # Review each file
    for filepath in changed_files:
        print(f"\nü§î Reviewing {filepath}...")

        content = read_file_content(filepath)
        if not content:
            print(f"‚ö†Ô∏è  Could not read {filepath}, skipping")
            continue

        review = review_file_with_claude(filepath, content, agent_definition)

        if review:
            post_review_as_code_review(review, filepath, commit_sha)
        else:
            print(f"‚ùå Failed to generate review for {filepath}")

    print("\n‚ú® Review complete!")

if __name__ == '__main__':
    main()
